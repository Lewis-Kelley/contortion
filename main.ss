(load "grid.ss")
(load "read-csv.ss")

(define (main filename num-contours)
  (let* ((grid (read-csv filename))
         (contour-grid (make-contour-grid grid num-contours))
         (contour-graph (grid->graph contour-grid))
         (trimmed-edges (graph-filter-edges edge-connects-same-contours
                                            contour-graph))
         (trimmed-contour-graph (graph (graph-vertices contour-graph)
                                       trimmed-edges))
         (contour-subgraphs (graph->connected-subgraphs trimmed-contour-graph)))
    contour-subgraphs))

(define (edge-connects-same-contours e)
  (equal? (car (edge-origin e))
          (car (edge-dest e))))

(define (make-contour-grid grid num-contours)
  (let* ((min-val (grid-min grid))
         (max-val (grid-max grid))
         (contour-interval (/ (- max-val min-val)
                              num-contours)))
    (grid-map (lambda (elem)
                (floor (/ (- elem min-val)
                          contour-interval)))
              grid)))
